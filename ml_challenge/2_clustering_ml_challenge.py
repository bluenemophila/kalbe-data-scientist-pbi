# -*- coding: utf-8 -*-
"""2. Clustering ML Challenge

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11NinSrXnm3x_QGjhO70liWk9-YInuwzw

# Data Understanding

## Import Dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error
# %matplotlib inline

"""## Load Data"""

from google.colab import drive
drive.mount('/content/drive')

# laoding data
customer_table = pd.read_csv('/content/drive/MyDrive/Case Study Data Scientist/Customer.csv', sep=';')
product_table = pd.read_csv('/content/drive/MyDrive/Case Study Data Scientist/Product.csv', sep=';')
store_table = pd.read_csv('/content/drive/MyDrive/Case Study Data Scientist/Store.csv', sep=';')
transaction_table = pd.read_csv('/content/drive/MyDrive/Case Study Data Scientist/Transaction.csv', sep=';')

"""## Deskripsi Tabel"""

customer_table.info()

product_table.info()

store_table.info()

transaction_table.info()

"""# Data Preparation"""

# ubah tanggal transaksi menjadi format datetime
transaction_table['Date'] = pd.to_datetime(transaction_table['Date'], format='%d/%m/%Y')

"""## Menangani missing value"""

customer_table.isnull().sum()

product_table.isnull().sum()

store_table.isnull().sum()

transaction_table.isnull().sum()

"""Karena pada tabel customer, terdapat customer dengan marital status kosong, kita akan mengisinya dengan marital status yang paling sering muncul."""

customer_table['Marital Status'].fillna(customer_table['Marital Status'].mode()[0], inplace=True)

customer_table.isnull().sum()

"""## Menggabungkan tabel"""

merged_data = pd.merge(transaction_table, product_table, on='ProductID', how='left')
merged_data = pd.merge(merged_data, store_table, on='StoreID', how='left')
merged_data = pd.merge(merged_data, customer_table, on='CustomerID', how='left')
merged_data.head()

merged_data.info()

"""## Membuat data baru untuk clustering"""

cluster_df = merged_data.groupby('CustomerID').agg({'TransactionID':'count',
                                                   'Qty':'sum',
                                                   'TotalAmount':'sum'}).reset_index()
cluster_df

cluster_df.info()

cluster_data = cluster_df.drop(columns = ['CustomerID'])
cluster_data.head()

cluster_data.isna().sum()

"""## Standarisasi dataset"""

clustering = MinMaxScaler().fit_transform(cluster_data)
clustering

"""# Modeling"""

inertia= []
for n in range (1,11):
    model = KMeans(n_clusters=n, init='k-means++', n_init = 10, max_iter=100, tol =0.0001, random_state = 100)
    model.fit(clustering)
    inertia.append(model.inertia_)

plt.figure(figsize=(10,8))
plt.plot(list(range(1,11)), inertia, color = 'blue', marker='o')
plt.title('Inertia vs Number of Cluster', fontsize = 15)
plt.xlabel('Number of Cluster')
plt.ylabel('Inertia')
plt.xticks(list(range(1,11)))
plt.show()

"""Berdasarkan elbow method, cluster terbaik adalah 3 kelompok."""

kmeans = KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=100)
kmeans.fit(clustering)

cluster_data['cluster'] = kmeans.labels_
cluster_data.head()

"""## Evaluasi jumlah cluster"""

from sklearn.metrics import davies_bouldin_score

results = {}

for i in range(2,11):
    kmeans = KMeans(n_clusters=i, random_state=0, n_init='auto')
    labels = kmeans.fit_predict(clustering)
    db_index = davies_bouldin_score(clustering, labels)
    results.update({i: db_index})

plt.plot(list(results.keys()), list(results.values()))
plt.xlabel("Number of clusters")
plt.ylabel("Davies-Boulding Index")
plt.show()

"""Terlihat dari indeks davies-boulding, untuk cluster 3 memiliki indeks yang cukup rendah, dimana artinya jumlah cluster tersebut sudah terpisah dengan baik.

## Visualisasi cluster
"""

cluster_data.plot(kind='scatter', x='Qty', y='TotalAmount', c='cluster', cmap='plasma', figsize=(10,8), legend=True)

"""# Interpretasi dan Analisis"""

merged_data['RecentPurchase'] = (pd.to_datetime('2023-01-01') - merged_data['Date']).dt.days.astype('int')
recent_customers = merged_data.groupby('CustomerID').agg({'RecentPurchase':'min'})
recent_customers.sort_values(by='RecentPurchase',ascending=True)

cluster_data = pd.merge(cluster_data, recent_customers, on='CustomerID', how='left')
cluster_data.head()

import seaborn as sns

fig, ax = plt.subplots(4,1,figsize=(10,10))

sns.histplot(data=cluster_data,x='RecentPurchase',hue='cluster',palette='Set2',ax=ax[0],kde=True)
ax[0].set_title('Purchase Recency')
sns.histplot(data=cluster_data,x='TransactionID',hue='cluster',palette='Set2',ax=ax[1],kde=True)
ax[1].set_title('Purchase Frequency')
sns.histplot(data=cluster_data,x='TotalAmount',hue='cluster',palette='Set2',ax=ax[2],kde=True)
ax[2].set_title('Monetary')
sns.histplot(data=cluster_data,x='Qty',hue='cluster',palette='Set2',ax=ax[3],kde=True)
ax[3].set_title('Quantity')

plt.tight_layout()
plt.show()

cluster_data['CustomerID'] = cluster_df['CustomerID']
cluster_data.groupby(['cluster']).agg({
    'CustomerID' : 'count',
    'TotalAmount' : 'mean',
    'Qty' : 'mean',
})

"""Berdasarkan statistik deskriptif tersebut, kelompok konsumen berdasarkan karakteristiknya adalah sebagai berikut:

1.  Cluster 0 (Active customer)
- Kelompok dengan jumlah konsumen terbanyak
- Banyak konsumen dengan riwayat transaksi baru
- Frekuensi berbelanja medium (rentang 7-15 kali)
- Daya beli medium (total belanja 25.000-50.000 dan jumlah barang yang dibeli 30-55 barang)

Strategi:
- Memberikan kode voucher untuk menambah jumlah pembelian
- Membangun hubungan dengan konsumen

2. Cluster 1 (Loyal customer)
- Kelompok dengan jumlah konsumen paling sedikit
- Riwayat transaksi di rentang medium
- Frekuensi belanja tinggi (12-20 kali)
- Daya beli tinggi (total belanja 40.000-70.000, jumlah yang dibeli 40-75 barang)

Strategi:
- Memberikan program loyalty
- Memberikan survei kepuasan pelanggan

3. Cluster 2 (Potential customer)
- Kelompok dengan jumlah konsumen sedang
- Riwayat transaksi cenderung lama
- Frekuensi belanja rendah (3-12 kali)
- Daya beli rendah (total belanja 10.000-35.000, jumlah barang yang dibeli 10-35 barang)

Strategi:
- Memberikan diskon dan promo untuk jumlah pembelian banyak
- Membuat promo bundling
- Memberikan survei untuk mengetahui potensi pengembangan produk
"""